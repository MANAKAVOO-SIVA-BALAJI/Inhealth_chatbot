base-url = http://127.0.0.1:8000/api/v1/

Run a project : uvicorn api.main:app --reload

1. Test Connection

Endpoint: http://127.0.0.1:8000/api/v1/

Request Method: GET
Headers:
X-API-KEY: 123456789
Body:
{}


Response
Headers:
content-length: 52 
 content-type: application/json 
 date: Tue,06 May 2025 11:51:59 GMT 
 server: uvicorn 
 x-ratelimit-limit: 60 
 x-ratelimit-remaining: 55 
 x-ratelimit-reset: 1746532379 
 x-request-id: d07a9ea5-2ee6-4131-9c2e-17d7b5470e6a 

{
  "message": "Connected to Blood Bank Chatbot API!"
}




2. Chat with Bot

Endpoint: http://127.0.0.1:8000/api/v1/chat

Request Method: POST

Headers:
  X-API-KEY: 123456789
Body:
{
  "message": "how many pending orders are there,",
  "role": "admin"
}

Response:

Headers:
  content-length: 52 
  content-type: application/json 
  date: Tue,06 May 2025 11:51:59 GMT 
  server: uvicorn 
  x-ratelimit-limit: 60 
  x-ratelimit-remaining: 55 
  x-ratelimit-reset: 1746532379 
  x-request-id: d07a9ea5-2ee6-4131-9c2e-17d7b5470e6a 
 Body : 
  {
    "response": "There are currently 3 pending orders.",
    "error": null,
    "error_type": null
  }

tables and columns
 bloodorderview {
    age
    blood_bank_name
    blood_group
    companyid
    creation_date_and_time
    delivery_date_and_time
    last_name
    first_name
    patient_id
    order_line_items
    reason
    request_id
    status
  }
  costandbillingview {
    blood_component
    company_id
    company_name
    month_year
    overall_blood_unit
    total_cost
    total_patient
  }


queries

{
      "All_Orders": {
        "description": "Get all blood orders.",
        "query": "query { bloodorderview { request_id first_name last_name blood_group status blood_bank_name } }"
      },
      "Order_Status": {
        "description": "Get the status of a specific order by request ID.",
        "query": "query { bloodorderview { request_id first_name status blood_group status blood_bank_name } }"
      },
      "Pending_Orders": {
        "description": "Get all pending orders (status: PA).",
        "query": "query { bloodorderview(where: {status: {_eq: \"PA\"}}) { request_id first_name last_name blood_group status blood_bank_name } }"
      },
      "Approved_Orders": {
        "description": "Get all approved orders (status: AA).",
        "query": "query { bloodorderview(where: {status: {_eq: \"AA\"}}) { request_id first_name last_name blood_group status blood_bank_name } }"
      },
      "Rejected_Orders": {
        "description": "Get all rejected orders (status: REJ).",
        "query": "query { bloodorderview(where: {status: {_eq: \"REJ\"}}) { request_id first_name last_name blood_group status blood_bank_name } }"
      },
      "Orders_By_Blood_Type": {
        "description": "Get all orders for a specific blood type.",
        "query": "query { bloodorderview { request_id first_name last_name blood_group status blood_bank_name } }"
      },
      "Orders_By_BloodBank": {
        "description": "Get all orders from a specific blood bank.",
        "query": "query { bloodorderview { request_id first_name last_name blood_group status } }"
      },
      "Orders_By_Status_And_BloodBank": {
        "description": "Get all orders for a specific blood bank with a specific status.",
        "query": "query { bloodorderview { request_id first_name last_name blood_group status } }"
      },
      "Total_Orders_By_BloodBank": {
        "description": "Get the total number of orders handled by a blood bank.",
        "query": "query { bloodorderview { request_id first_name last_name blood_group status } }"
      },
      "Billing_Overview": {
        "description": "Get cost and patient details for all blood banks.",
        "query": "query { costandbillingview { company_name month overall_blood_unit total_cost total_patient } }"
      },
      "Billing_By_Company": {
        "description": "Get billing details for a specific hospital or company.",
        "query": "query { costandbillingview { company_name blood_component total_cost overall_blood_unit } }"
      },
      "Cost_By_Blood_Component": {
        "description": "Get the total cost for a specific blood component.",
        "query": "query { costandbillingview { blood_component company_name total_cost } }"
      },
      "Total_Patients_By_Company": {
        "description": "Get the total number of patients for a specific company.",
        "query": "query { costandbillingview { company_name total_patient } }"
      },
      "Blood_Usage_By_Company": {
        "description": "Get the total blood units used by a specific company.",
        "query": "query { costandbillingview { company_name overall_blood_unit } }"
      },
      "Recent_Orders": {
        "description": "Get the most recent 5 blood orders.",
        "query": "query { bloodorderview(order_by: {request_id: desc}, limit: 5) { request_id first_name last_name blood_group status blood_bank_name } }"
      },
      "farewell": {
        "description": "End the conversation.",
        "query": "Thank you , let me know if there is anything else I can help you with."
      },
      "greetings":{
        "description": "Greet the user.",
        "query": "{ \"Hello! How can I help you today?\" }"
      },
      "others": {
        "description": "Handles unknown queries.",
        "query": ""
      }
    }


For env changes , we need to start the docker 

Stop the running container (to avoid conflicts):
docker stop bdd93f651d70c279227ee1eba968cba665356b53ab8f5cbfa9898ab931ef3e59 #container_id

Then restart it with the updated env file:
docker run -d -p 8000:8000 --env-file .env my-fastapi-app



if changed app code (e.g., main.py or other files)

we need to rebuild the Docker image:
docker build -t my-fastapi-app .

Then stop and remove the old container:
docker stop <container_id>
docker rm <container_id>

And run a new container with the updated image:
docker run -d -p 8000:8000 --env-file .env my-fastapi-app


Redis setup
docker run -d -p 6379:6379 --name redis-server redis
